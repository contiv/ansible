---
# This role contains tasks for configuring and starting netmaster and netplugin service
# or for starting docker plugin service

- name: setup iptables for contiv network control plane
  shell: >
      ( iptables -L INPUT | grep "{{ netplugin_rule_comment }} ({{ item }})" ) || \
      iptables -I INPUT 1 -p tcp --dport {{ item }} -j ACCEPT -m comment --comment "{{ netplugin_rule_comment }} ({{ item }})"
  with_items:
    - "{{ ofnet_master_port }}"
    - "{{ ofnet_agent_port1 }}"
    - "{{ ofnet_agent_port2 }}"
    - "{{ netmaster_port }}"
    - "{{ gobgp_grpc_port }}"
    - "{{ bgp_port }}"
    - "{{ vxlan_port }}"

- name: setup netmaster host alias
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 netmaster"
    regexp: " netmaster$"
    state: present
  when: (run_as == "master")

- name: copy contiv binaries
  copy: src="{{ contiv_standalone_binaries }}/{{ contiv_network_tar_file }}" dest="{{ contiv_network_dest_file }}"
  when: contiv_network_local_install == True 

- name: download contiv binaries
  get_url:
    validate_certs: "{{ validate_certs }}"
    url: "{{ contiv_network_src_file }}"
    dest: "{{ contiv_network_dest_file }}" 
  when: contiv_network_local_install == False

- name: ensure netplugin directory exists
  file: path=/usr/bin/contiv/netplugin state=directory

- name: create links for netctl binary
  file: src=/usr/bin/contiv/netplugin/netctl dest=/usr/bin/netctl state=link force=yes

- include: services.yml
  when: contiv_v2plugin_install == False
  static: no

- include: v2plugin.yml
  when: contiv_v2plugin_install == True
  static: no

# k8s tasks are run after extracting the binaries as we need to copy the k8s
# cni plugin for contiv, which is available after extraction of binaries
- include: k8s_tasks.yml
  when: scheduler_provider == "kubernetes"

- name: copy bash auto complete file for netctl
  file: src=/usr/bin/contiv/netplugin/contrib/completion/bash/netctl dest=/etc/bash_completion.d/netctl state=link

# setting global info needs netmaster to be ready
- name: wait for netmaster to be ready
  action: shell netctl --netmaster {{ netctl_url }} tenant ls
  register: tenant_result
  until: tenant_result.stdout.find("default") != -1
  retries: 9
  delay: 10

- include: aci_tasks.yml
  when: (run_as == "master") and (contiv_network_mode == "aci")

- name: set fwd mode
  shell: netctl --netmaster {{ netctl_url }} global set --fwd-mode "{{ fwd_mode }}"
  when: (run_as == "master")
  run_once: true
